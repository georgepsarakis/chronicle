{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Motivation Warning This project is currently considered as \"alpha\" release. Configuration, API and operations may change and code coverage will improve. Installation Currently only installation via GitHub is possible: pip install git+https://github.com/georgepsarakis/chronicle.git Starting from the beta release, a PyPI package will be available. Features Configurable Timeout Maximum Concurrency Task Weight Task weights can be used to determine each job's contribution to the total concurrency. This is useful for differentiating between I/O-heavy jobs and CPU-bound jobs. Backfill In case of maintenance operations or during a deployment, the scheduled jobs should stop running. Also, when new scheduled jobs are added there might be a need to execute the schedule for a short period in the past. Chronicle allows the schedule clock to be set in the past, simply by passing a timestamp when starting the server. Pause / Resume Requires use of the Redis backend. Executions can be paused for a given interval, or a date/time in the future. Resuming manually is also possible. While on pause, the scheduler clock continues to advance and already running jobs are not cancelled. More fine grained control over which jobs will be paused is given by providing a regular expression that will match the commands or the job hash(es), which are generated by Chronicle and uniquely identify jobs. Crontab Format Export The interval, environment variables and the command can be exported in crontab-compatible format. The output is useful for inspection or for migrating/deploying to a crontab-based system. Chronicle-specific additional metadata will also appear as comments. Status Checks Callbacks Comments Chronicle allows for providing more structured annotations for each job. Metrics & Reporting STDOUT/STDERR Capturing Environment Variables Environment Providers Chronicle Context Available Variables Environment Filtering Duplicate Command Handling When a job execution time exceeds its interval, processes may start piling up, requiring more resources to complete and effectively bring execution to a halt. In addition, the increased resource consumption (e.g. database queries), may start causing issues to other components of the stack, for example a web application server. Skip Strategy It is possible that the same command is configured at different intervals or its execution time may extend over the given interval. Chronicle ensures that only a single instance of a command is running at any given time. Restart Strategy Task Cancellation","title":"Introduction"},{"location":"#motivation","text":"Warning This project is currently considered as \"alpha\" release. Configuration, API and operations may change and code coverage will improve.","title":"Motivation"},{"location":"#installation","text":"Currently only installation via GitHub is possible: pip install git+https://github.com/georgepsarakis/chronicle.git Starting from the beta release, a PyPI package will be available.","title":"Installation"},{"location":"#features","text":"","title":"Features"},{"location":"#configurable-timeout","text":"","title":"Configurable Timeout"},{"location":"#maximum-concurrency","text":"","title":"Maximum Concurrency"},{"location":"#task-weight","text":"Task weights can be used to determine each job's contribution to the total concurrency. This is useful for differentiating between I/O-heavy jobs and CPU-bound jobs.","title":"Task Weight"},{"location":"#backfill","text":"In case of maintenance operations or during a deployment, the scheduled jobs should stop running. Also, when new scheduled jobs are added there might be a need to execute the schedule for a short period in the past. Chronicle allows the schedule clock to be set in the past, simply by passing a timestamp when starting the server.","title":"Backfill"},{"location":"#pause-resume","text":"Requires use of the Redis backend. Executions can be paused for a given interval, or a date/time in the future. Resuming manually is also possible. While on pause, the scheduler clock continues to advance and already running jobs are not cancelled. More fine grained control over which jobs will be paused is given by providing a regular expression that will match the commands or the job hash(es), which are generated by Chronicle and uniquely identify jobs.","title":"Pause / Resume"},{"location":"#crontab-format-export","text":"The interval, environment variables and the command can be exported in crontab-compatible format. The output is useful for inspection or for migrating/deploying to a crontab-based system. Chronicle-specific additional metadata will also appear as comments.","title":"Crontab Format Export"},{"location":"#status-checks","text":"","title":"Status Checks"},{"location":"#callbacks","text":"","title":"Callbacks"},{"location":"#comments","text":"Chronicle allows for providing more structured annotations for each job.","title":"Comments"},{"location":"#metrics-reporting","text":"","title":"Metrics &amp; Reporting"},{"location":"#stdoutstderr-capturing","text":"","title":"STDOUT/STDERR Capturing"},{"location":"#environment-variables","text":"","title":"Environment Variables"},{"location":"#environment-providers","text":"","title":"Environment Providers"},{"location":"#chronicle-context","text":"","title":"Chronicle Context"},{"location":"#available-variables","text":"","title":"Available Variables"},{"location":"#environment-filtering","text":"","title":"Environment Filtering"},{"location":"#duplicate-command-handling","text":"When a job execution time exceeds its interval, processes may start piling up, requiring more resources to complete and effectively bring execution to a halt. In addition, the increased resource consumption (e.g. database queries), may start causing issues to other components of the stack, for example a web application server.","title":"Duplicate Command Handling"},{"location":"#skip-strategy","text":"It is possible that the same command is configured at different intervals or its execution time may extend over the given interval. Chronicle ensures that only a single instance of a command is running at any given time.","title":"Skip Strategy"},{"location":"#restart-strategy","text":"","title":"Restart Strategy"},{"location":"#task-cancellation","text":"","title":"Task Cancellation"},{"location":"development/","text":"","title":"Development"},{"location":"extending/","text":"","title":"Extending"},{"location":"internals/","text":"","title":"Internals"},{"location":"user_guide/","text":"Configuration Single Execution per Command Using Bash as a shell Timeout Command-Line Interface Operations Backends Redis Docker Django","title":"User Guide"},{"location":"user_guide/#configuration","text":"","title":"Configuration"},{"location":"user_guide/#single-execution-per-command","text":"","title":"Single Execution per Command"},{"location":"user_guide/#using-bash-as-a-shell","text":"","title":"Using Bash as a shell"},{"location":"user_guide/#timeout","text":"","title":"Timeout"},{"location":"user_guide/#command-line-interface","text":"","title":"Command-Line Interface"},{"location":"user_guide/#operations","text":"","title":"Operations"},{"location":"user_guide/#backends","text":"","title":"Backends"},{"location":"user_guide/#redis","text":"","title":"Redis"},{"location":"user_guide/#docker","text":"","title":"Docker"},{"location":"user_guide/#django","text":"","title":"Django"}]}